#include "TempoData.h"
//#include "windows.h"

///////////////////////////////////////////////////////////////////////////////////////////////////
/// TempoData (construtor).
/// Propósito: Construtor. Já obtém data e hora atualizados<br>
/// Entradas: Nenhuma<br>
/// Saídas: Nenhuma<br>
///
///////////////////////////////////////////////////////////////////////////////////////////////////
TEMPODATA::TEMPODATA(){
	PegaLocalTime();								// Já atualiza com o valor de localtime atual
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// TempoData (destrutor).
/// Propósito: <br>
/// Entradas:<br>
/// Saídas: <br>
///
///////////////////////////////////////////////////////////////////////////////////////////////////
TEMPODATA::~TEMPODATA(){}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// PegaLocalTime.
/// Propósito: Atualiza o atributo loLocalTime com o Local Time atual<br>
/// Entradas: Nenhuma<br>
/// Saídas: Nenhuma<br>
///
///////////////////////////////////////////////////////////////////////////////////////////////////
void TEMPODATA::PegaLocalTime(){
	GetLocalTime(&lpLocalTime);						// Da biblioteca windows.h
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// ImprimeHora.
/// Propósito: Exibe a hora no console no formato 00:00:00 (hora:minuto:segundo)<br>
/// Obs.: Não atualiza lpLocalTime antes de exibir a hora.<br>
/// Entradas: Nenhuma<br>
/// Saídas: Nenhuma<br>
///
///////////////////////////////////////////////////////////////////////////////////////////////////
void TEMPODATA::ImprimeHora(){
	printf("%02d:%02d:%02d", lpLocalTime.wHour, lpLocalTime.wMinute, lpLocalTime.wSecond);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// ImprimeDataAtualizada.
/// Propósito: Atualiza a hora e imprime no console.<br>
/// Chama PegalLocalTime() e depois ImprimeHora();<br>
/// Entradas: Nenhuma<br>
/// Saídas: Nenhuma<br>
///
///////////////////////////////////////////////////////////////////////////////////////////////////
void TEMPODATA::ImprimeHoraAtualizada(){
	PegaLocalTime();
	ImprimeHora();
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// RetornaDataEHora.
/// Propósito: Retorna uma string com data e hora no formato: dd/mm/aaaa hh:mm:ss<br>
/// Entradas: char saida[100]<br>
/// Saídas: Nenhuma<br>
///
/// \param [out] saida vetor que receberá a string de data e hora formatada
///////////////////////////////////////////////////////////////////////////////////////////////////
void TEMPODATA::RetornaDataEHora(char saida[100]){
	sprintf(saida, " %02d/%02d/%d %02d:%02d:%02d", lpLocalTime.wDay, lpLocalTime.wMonth, lpLocalTime.wYear, 
												   lpLocalTime.wHour, lpLocalTime.wMinute, lpLocalTime.wSecond);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
/// RetornaDataEHoraAtualizada.
/// Propósito: Chama PegaLocalTime() e depois RetornaDataEHora();<br>
/// Entradas: char saida[100]<br>
/// Saídas: Nenhuma<br>
///
/// \param [out] saida vetor que receberá a string de data e hora formatada
/// \sa PegaLocalTime
/// \sa RetornaDataEHora
///////////////////////////////////////////////////////////////////////////////////////////////////
void TEMPODATA::RetornaDataEHoraAtualizada(char saida[100]){
	PegaLocalTime();
	RetornaDataEHora(saida);
}